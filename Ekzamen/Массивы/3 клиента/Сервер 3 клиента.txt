int GetCountClients();

int GetCountClients()
{
	LPSOCKET_INFORMATION temp = NULL;
	temp = SocketInfoList;
	int n = 0;
	while (temp)
	{
		n++;
		temp = temp -> Next;
	}
	return n;
}


LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, 
							WPARAM wParam, LPARAM lParam)
{
   SOCKET Accept;
   LPSOCKET_INFORMATION SocketInfo;
   DWORD RecvBytes, SendBytes;
   DWORD Flags;
   WSABUF wsabuf;



case FD_ACCEPT:

			// Создание структуры с информацией о сокете
			   // и занесение ее в список
			   if (GetCountClients () < 3)
			   {
					CreateSocketInformation(Accept, Str, pLB);
					sprintf_s (Str, sizeof (Str),
							  "Socket number %d connected", 
							  Accept);
					pLB->AddString(Str);
					WSAAsyncSelect(Accept, hwnd, WM_SOCKET, 
							  FD_READ|FD_WRITE|FD_CLOSE);
					if (GetCountClients () == 3)
					{
						LPSOCKET_INFORMATION temp = NULL;
						temp = SocketInfoList;
						wsabuf.buf = "Connect";
						wsabuf.len = strlen(wsabuf.buf);
						while (temp)
						{
							if (WSASend(temp->Socket, 
							  &(wsabuf), 1, 
							  &SendBytes, 0, NULL, NULL) == 
					  SOCKET_ERROR)
							{
								if (WSAGetLastError() != 
											WSAEWOULDBLOCK)
									{
										sprintf_s (Str, sizeof (Str),
									  "WSASend() failed"
										 " with error %d", 
										 WSAGetLastError());
										pLB->AddString(Str);
										FreeSocketInformation(wParam, 
											  Str, pLB);
										return 0;
									 }
							}
							temp = temp -> Next;
						}
					}
			   }
			   else
			   {
				   wsabuf.buf = "Fail";
				   wsabuf.len = strlen(wsabuf.buf);
				   if (WSASend(Accept, 
							  &(wsabuf), 1, 
							  &SendBytes, 0, NULL, NULL) == 
					  SOCKET_ERROR)
							{
								if (WSAGetLastError() != 
											WSAEWOULDBLOCK)
									{
										sprintf_s (Str, sizeof (Str),
									  "WSASend() failed"
										 " with error %d", 
										 WSAGetLastError());
										pLB->AddString(Str);
										FreeSocketInformation(wParam, 
											  Str, pLB);
										return 0;
									 }
							}
			   }
			   break;



case FD_READ:

 if (bPrint)
					 {
						unsigned l = sizeof(Str)-1;
						if (l > RecvBytes) 
						   l = RecvBytes;
						sprintf_s (Str, sizeof (Str),
									  SocketInfo->Buffer, l);
						Str[l]=0;
						pLB->AddString(Str);
					 }
					 LPSOCKET_INFORMATION temp = NULL;
					 temp = SocketInfoList;
					 int readflag = 1;
					 while (temp)
					 {
						 if(temp->BytesRECV == 0)
						 {
							 readflag = 0;
							 break;
						 }
						 temp = temp -> Next;
					 }
					 if (readflag)
					 {
						 temp = SocketInfoList;
						 char user1[100], user2[100], user3[100];
						 sprintf_s(user1, sizeof(user1), temp->DataBuf.buf);
						 sprintf_s(user2, sizeof(user2), temp->Next->DataBuf.buf);
						 sprintf_s(user3, sizeof(user3), temp->Next->Next->DataBuf.buf);
						 strcpy(temp->DataBuf.buf, user3);
						 strcpy(temp->Next->DataBuf.buf, user1);
						 strcpy(temp->Next->Next->DataBuf.buf, user2);
						 temp->DataBuf.len = strlen(temp->DataBuf.buf);
						 temp->Next->DataBuf.len = strlen(temp->Next->DataBuf.buf);
						 temp->Next->Next->DataBuf.len = strlen(temp->Next->Next->DataBuf.buf);
						 while(temp)
						 {
							 if (WSASend(temp->Socket, 
								 &(temp->DataBuf), 1, 
							  &SendBytes, 0, NULL, NULL) == 
								SOCKET_ERROR)
							{
								if (WSAGetLastError() != 
											WSAEWOULDBLOCK)
									{
										sprintf_s (Str, sizeof (Str),
									  "WSASend() failed"
										 " with error %d", 
										 WSAGetLastError());
										pLB->AddString(Str);
										FreeSocketInformation(wParam, 
											  Str, pLB);
										return 0;
									 }
							}
							 temp = temp -> Next;
						 }
					 }
				  }
			   }
			   break;
			   // ЗДЕСЬ НЕТ ОПЕРАТОРА break, поскольку мы 
			   // получили данные. Продолжаем работу и
			   // начинаем их отправку клиенту.


	