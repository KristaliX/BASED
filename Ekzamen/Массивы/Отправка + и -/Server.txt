
int GetNumSocket();
int Flag = 1;


int GetNumSocket()
{
	LPSOCKET_INFORMATION temp = NULL;
	temp = SocketInfoList;
	int n = 0;
	while (temp)
	{
		n++;
		temp = temp->Next;
	}
	return n;
}



	WSABUF wsabuf;


				if (Flag && GetNumSocket() < 2)
				{

					// Создание структуры с информацией о сокете
				   // и занесение ее в список
					CreateSocketInformation(Accept, Str, pLB);
					sprintf_s(Str, sizeof(Str),
						"Socket number %d connected",
						Accept);
					pLB->AddString(Str);
					WSAAsyncSelect(Accept, hwnd, WM_SOCKET,
						FD_READ | FD_WRITE | FD_CLOSE);
					if (GetNumSocket() == 2)
					{
						Flag = 0;
						wsabuf.buf = "You're connected!";
						wsabuf.len = strlen(wsabuf.buf);
						LPSOCKET_INFORMATION temp = NULL;
						temp = SocketInfoList;
						while (temp)
						{

							if (WSASend(temp->Socket, &wsabuf, 1, &SendBytes, 0, NULL, NULL) ==
								SOCKET_ERROR)
							{
								if (WSAGetLastError() !=
									WSAEWOULDBLOCK)
								{
									sprintf_s(Str, sizeof(Str),
										"WSASend() failed"
										" with error %d",
										WSAGetLastError());
									pLB->AddString(Str);
									FreeSocketInformation(wParam,
										Str, pLB);
									return 0;
								}
							}
							temp = temp->Next;
						}
					}
				}
				else
				{
					wsabuf.buf = "No more room on server";
					wsabuf.len = strlen(wsabuf.buf);
					if (WSASend(Accept, &wsabuf, 1, &SendBytes, 0, NULL, NULL) ==
						SOCKET_ERROR)
					{
						if (WSAGetLastError() !=
							WSAEWOULDBLOCK)
						{
							sprintf_s(Str, sizeof(Str),
								"WSASend() failed"
								" with error %d",
								WSAGetLastError());
							pLB->AddString(Str);
							FreeSocketInformation(wParam,
								Str, pLB);
							return 0;
						}
					}
					closesocket(Accept);

				}
				break;

				

			case FD_READ:


				SocketInfo = GetSocketInformation(wParam, Str, pLB);

				SocketInfo->DataBuf.buf = SocketInfo->Buffer;
				SocketInfo->DataBuf.len = DATA_BUFSIZE;

				Flags = 0;
				if (WSARecv(SocketInfo->Socket,
					&(SocketInfo->DataBuf), 1,
					&RecvBytes,
					&Flags, NULL, NULL) ==
					SOCKET_ERROR)
				


void CServerDlg::OnBnClickedButton1()
{
	LPSOCKET_INFORMATION temp = NULL;
	temp = SocketInfoList;
	DWORD send;
	WSABUF wsabuf1;
	wsabuf1.buf = "+";
	wsabuf1.len = strlen(wsabuf1.buf);
	if (WSASend(temp->Socket, &wsabuf1, 1, &send, 0, NULL, NULL) ==
		SOCKET_ERROR)
	{

	}
	wsabuf1.buf = "-";
	wsabuf1.len = strlen(wsabuf1.buf);
	if (WSASend(temp->Next->Socket, &wsabuf1, 1, &send, 0, NULL, NULL) ==
		SOCKET_ERROR)
	{

	}

}


void CServerDlg::OnBnClickedButton2()
{
	LPSOCKET_INFORMATION temp = NULL;
	temp = SocketInfoList;
	DWORD send;
	WSABUF wsabuf1;
	wsabuf1.buf = "+";
	wsabuf1.len = strlen(wsabuf1.buf);
	if (WSASend(temp->Next->Socket, &wsabuf1, 1, &send, 0, NULL, NULL) ==
		SOCKET_ERROR)
	{

	}
	wsabuf1.buf = "-";
	wsabuf1.len = strlen(wsabuf1.buf);
	if (WSASend(temp->Socket, &wsabuf1, 1, &send, 0, NULL, NULL) ==
		SOCKET_ERROR)
	{

	}

}